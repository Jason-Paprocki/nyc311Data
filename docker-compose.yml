services:
  db:
    image: postgis/postgis:15-3.4
    container_name: nyc_311_db
    restart: always
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init:/docker-entrypoint-initdb.d
    networks:
      - app-network

  populate_db:
    build:
      context: ./populate_db
    container_name: nyc_311_populator
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - app-network

  # --- NEW SERVICE ---
  # This "one-shot" service runs our analytics script and then exits.
  analytics:
    build:
      context: ./analytics
    container_name: nyc_311_analytics
    env_file:
      - .env
    depends_on:
      # It waits for the main data population to finish before running.
      - populate_db
    networks:
      - app-network

  api:
    build:
      context: ./api
    container_name: nyc_311_api
    restart: always
    env_file:
      - .env
    ports:
      - "8000:8000"
    #volumes:
    #  - ./api:/app
    depends_on:
      # --- MODIFIED ---
      # The API now waits for the analytics service to complete.
      # This creates the startup chain: db -> populate_db -> analytics -> api
      - analytics
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
    container_name: nyc_311_frontend
    restart: always
    env_file:
      - .env
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
